{"files":[{"id":"f501f089-3514-48d3-96f0-9e006b6a8ceb","name":"auto_delete_for_gmail_categories","type":"server_js","source":"/*\n    Original Script: http://www.skipser.com/p/2/p/auto-delete-email-in-any-gmail-label-.html\n    Modified by: Cryden\n    \n    To use:\n        1) Select \u0027File -\u003e Make a Copy\u0027. This will create a copy of the script in your Google drive. Open it.\n        2) Set the value of \"CATEGORY_TO_SEARCH\" to the category you want to enable auto-delete for.\n        3) Set the value of \"DELETE_AFTER\" to the age of an email after which it should be deleted.\n            (eg. \"2m\" \u003d 2 months old. Replace the \"m\" with any of the following: d\u003dday, m\u003dmonth, y\u003dyear)\n            4) \u003cADVANCED USERS:\u003e you can add any additional gmail search parameters to the \"ADDITIONAL_SEARCH\" variable.\n        5) Select \u0027Run -\u003e Initialize\u0027. Google will ask you to grant required permissions.\n        6) Select \u0027Run -\u003e Install\u0027. This will install and start the script for your account.\n*/\n\n\n\n// The name(s) of the Gmail category(s) to check for purging? (separated by a space)\nvar CATEGORY_TO_SEARCH \u003d \"Promotions\";\n\n// Purge messages in the above category after what period of time?\nvar DELETE_AFTER \u003d \"1m\";\n\n// \u003cADVANCED USERS\u003e Any additional Gmail search terms\nvar ADDITIONAL_SEARCH \u003d \"\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n             ___ ___  ___  ___ \n            / __/ _ \\|   \\| __|\n           | (_| (_) | |) | _| \n            \\___\\___/|___/|___|\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n*/\n\nvar props \u003d PropertiesService.getScriptProperties()\nvar propGet \u003d props.getProperties()\n\n\nfunction Install() {\n  // Create a recurring trigger for the script that runs every day\n  ScriptApp.newTrigger(\"DeleteGmail\")\n          .timeBased().everyDays(1).create();\n  \n  // Run the script once\n  props.setProperties({\u0027Id\u0027: \u0027\u0027, \u0027Count\u0027: 0})\n  CreateTrigger()\n}\n\n\nfunction Uninstall() {\n  // Find and cancel all current pending triggers\n  ScriptApp.getProjectTriggers().forEach(function (t) {\n    ScriptApp.deleteTrigger(t);\n  });\n}\n\n\nfunction CreateTrigger() {\n  RemoveTrigger()\n  props.setProperty(\u0027Id\u0027, ScriptApp.newTrigger(\"DeleteGmail\")\n          .timeBased().after(1).create().getUniqueId());\n}\n\n\nfunction RemoveTrigger() {\n  ScriptApp.getProjectTriggers().forEach(function (t) {\n    if (t.getUniqueId() \u003d\u003d\u003d propGet[\u0027Id\u0027]) {\n      ScriptApp.deleteTrigger(t);\n    }\n  });\n}\n\n\nfunction DeleteGmail() {\n  // Create the search\n  var search \u003d \"category:{\" + CATEGORY_TO_SEARCH + \"} older_than:\" + DELETE_AFTER + \" \" + ADDITIONAL_SEARCH;\n  try {\n    // Get the first 100 matches\n    var threads \u003d GmailApp.search(search, 0, 5);\n    \n    // For all results, grab every thread and mark them as read before moving them to the trash\n    threads.forEach(function (thread) {\n      GmailApp.getMessagesForThread(thread).forEach(function (email) {\n        email.markRead();\n        email.moveToTrash();\n      });\n    });\n    // If there are 100 matches, update the email count and run the script again\n    if (threads.length \u003d\u003d 5) {\n      props.setProperty(\u0027Count\u0027, +propGet[\u0027Count\u0027] + threads.length)\n      CreateTrigger();\n    } else {\n      Logger.log(\"Deleted \" + +propGet[\u0027Count\u0027] + \" emails.\");\n    }\n  } catch (err) {\n    Logger.log(err);\n  }\n}\n\n\n"},{"id":"b9b4c35a-16ef-41ec-be7e-a4778f09e6b3","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Kolkata\",\n  \"dependencies\": {\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"}]}